<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>publications</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>kcid</key>
			<string>8774029276726229902</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentFilterV2</key>
			<dict>
				<key>children</key>
				<array/>
				<key>filterClass</key>
				<string>groupNode</string>
				<key>isConjunction</key>
				<true/>
			</dict>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGBwpYJHZlcnNpb25ZJGFyY2hpdmVyVCR0
			b3BYJG9iamVjdHMSAAGGoF8QD05TS2V5ZWRBcmNoaXZlctEICVRk
			YXRhgAGoCwwXGBkaHiVVJG51bGzTDQ4PEBMWV05TLmtleXNaTlMu
			b2JqZWN0c1YkY2xhc3OiERKAAoADohQVgASABYAHVHR5cGVUcm93
			c18QHVNlbGVjdGlvbkRldGFpbFR5cGVOU0luZGV4U2V00hsPHB1c
			TlNSYW5nZUNvdW50EACABtIfICEiWiRjbGFzc25hbWVYJGNsYXNz
			ZXNaTlNJbmRleFNldKIjJFpOU0luZGV4U2V0WE5TT2JqZWN00h8g
			JidcTlNEaWN0aW9uYXJ5oiYkAAgAEQAaACQAKQAyADcASQBMAFEA
			UwBcAGIAaQBxAHwAgwCGAIgAigCNAI8AkQCTAJgAnQC9AMIAzwDR
			ANMA2ADjAOwA9wD6AQUBDgETASAAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {695, 481}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string> USE publications;

# Challenge 1 - Most Profiting Authors

# Calculate the royalty of each sale for each author.
SELECT titles.title_id, authors.au_id, (titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) AS 'royalties'
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id;

# From Step 1 output as a derived table, aggregate the total royalties for each title for each author.
SELECT titles.title_id, authors.au_id, SUM(titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) AS 'royalties'
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id;

# Using the output from Step 2 as a derived table, calculate the total profits of each author by aggregating the advances and total royalties of each title.
SELECT authors.au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) AS 'profits'
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY profits DESC
LIMIT 3;

# Challenge 2 - Alternative Solution

# From Step 1 (in Challenge 1) output as a temp table, aggregate the total royalties for each title for each author.
CREATE TEMPORARY TABLE temp1 SELECT * FROM titleauthor;

SELECT titles.title_id, authors.au_id, SUM(titles.price * sales.qty * titles.royalty / 100 * temp1.royaltyper / 100)
FROM temp1
INNER JOIN AUTHORS ON authors.au_id = temp1.au_id
INNER JOIN titles ON titles.title_id = temp1.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id;

# Using the output from Step 1 as a temp table, calculate the total profits of each author by aggregating the advances and total royalties of each title.
CREATE TEMPORARY TABLE temp2 SELECT * FROM titleauthor;

SELECT authors.au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance)
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) DESC
LIMIT 3;


# Challenge 3

CREATE TABLE most_profiting_authors SELECT authors.au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) AS 'profits'
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) DESC
LIMIT 3;

SELECT *
FROM most_profiting_authors;</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>191</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>SELECT *
FROM most_profiting_authors</string>
		<string># Challenge 3

CREATE TABLE most_profiting_authors SELECT authors.au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) AS 'profits'
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) DESC
LIMIT 3</string>
		<string># Challenge 3

CREATE TABLE most_profiting_authors SELECT au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) AS 'profits'
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) DESC
LIMIT 3</string>
		<string># Challenge 3
DROP most_profiting_authors</string>
		<string># Challenge 3

CREATE TABLE most_profiting_authors SELECT au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) AS 'profits'
FROM titleauthor</string>
		<string>SELECT authors.au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance)
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) DESC
LIMIT 3</string>
		<string>SELECT titles.title_id, authors.au_id, SUM(titles.price * sales.qty * titles.royalty / 100 * temp1.royaltyper / 100)
FROM temp1
INNER JOIN AUTHORS ON authors.au_id = temp1.au_id
INNER JOIN titles ON titles.title_id = temp1.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id</string>
		<string>SELECT authors.au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance)
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY temp2 DESC
LIMIT 3</string>
		<string>SELECT authors.au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance)
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY profits DESC
LIMIT 3</string>
		<string>titleauthor</string>
		<string>SELECT authors.au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * temp2.royaltyper / 100) + titles.advance)
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = temp2.au_id
INNER JOIN titles ON titles.title_id = temp2.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY profits DESC
LIMIT 3</string>
		<string># Using the output from Step 1 as a temp table, calculate the total profits of each author by aggregating the advances and total royalties of each title.
CREATE TEMPORARY TABLE temp2 SELECT * FROM titleauthor</string>
		<string>SELECT titles.title_id, authors.au_id, SUM(titles.price * sales.qty * titles.royalty / 100 * temp1.royaltyper / 100)
FROM temp1
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id</string>
		<string>SELECT titles.title_id, authors.au_id, SUM(titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100)
FROM temp1
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id</string>
		<string># Challenge 2 - Alternative Solution

# From Step 1 (in Challenge 1) output as a temp table, aggregate the total royalties for each title for each author.
CREATE TEMPORARY TABLE temp1 SELECT * FROM titleauthor</string>
		<string># Challenge 2 - Alternative Solution

# From Step 1 (in Challenge 1) output as a temp table, aggregate the total royalties for each title for each author.
CREATE TEMPORARY TABLE temp1 SELECT titles.title_id, authors.au_id, SUM(titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100)
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id</string>
		<string># Using the output from Step 2 as a derived table, calculate the total profits of each author by aggregating the advances and total royalties of each title.
SELECT authors.au_id, SUM((titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) + titles.advance) AS 'profits'
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id
ORDER BY profits DESC
LIMIT 3</string>
		<string># From Step 1 output as a derived table, aggregate the total royalties for each title for each author.
SELECT titles.title_id, authors.au_id, SUM(titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) AS 'royalties'
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id
GROUP BY titles.title_id, authors.au_id</string>
		<string># Challenge 1 - Most Profiting Authors

# Calculate the royalty of each sale for each author.
SELECT titles.title_id, authors.au_id, (titles.price * sales.qty * titles.royalty / 100 * titleauthor.royaltyper / 100) AS 'royalties'
FROM titleauthor
INNER JOIN AUTHORS ON authors.au_id = titleauthor.au_id
INNER JOIN titles ON titles.title_id = titleauthor.title_id
INNER JOIN sales ON titles.title_id = sales.title_id</string>
		<string>USE publications</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>8.0.18</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
